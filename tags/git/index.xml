<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on ECHOHAKU BLOG</title><link>https://echoHaku.github.io/tags/git/</link><description>Recent content in Git on ECHOHAKU BLOG</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 22 Oct 2025 09:24:01 +0800</lastBuildDate><atom:link href="https://echoHaku.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 系列分享 - p.6 正式提交一個commit囉</title><link>https://echoHaku.github.io/posts/post_git_8/</link><pubDate>Wed, 22 Oct 2025 09:24:01 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_8/</guid><description>&lt;p&gt;在&lt;a href="https://echoHaku.github.io/posts/post_git_7/"&gt;Git 系列分享 - p.5 檔案追蹤並納入紀錄！（git status、git add）&lt;/a&gt;中，我們學會了如何使用 &lt;code&gt;git add&lt;/code&gt; 將變更從工作目錄移動到暫存區（Staging Area），完成變更的打包。&lt;/p&gt;
&lt;p&gt;現在，我們將進行工作流程中的最後一步：&lt;strong&gt;正式提交（Commit）&lt;/strong&gt;，為這次變更留下一個永久且不可磨滅的歷史快照。&lt;/p&gt;
&lt;h2 id="git-commit為變更留下永久快照"&gt;&lt;code&gt;git commit&lt;/code&gt;：為變更留下永久快照&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; 是 Git 流程中&lt;strong&gt;最關鍵的動作&lt;/strong&gt;。它會將暫存區的快照&lt;strong&gt;永久寫入&lt;/strong&gt;你的 Git 倉庫 (Repository)，形成專案歷史上的一個&lt;strong&gt;新版本節點&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="什麼是一個-commit"&gt;什麼是一個 Commit？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義：&lt;/strong&gt; 一個 Commit 就是一個「&lt;strong&gt;有意義的、邏輯完整的工作單元&lt;/strong&gt;」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;劃分原則：&lt;/strong&gt; 我們應該以「目的」來劃分 Commit，而不是以「時間」。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重點強調：&lt;/strong&gt; Commit 的大小並不重要！它可以是一個&lt;strong&gt;微小的 Bug 修正（小版本）&lt;/strong&gt;，也可以是一個&lt;strong&gt;完整的核心功能開發（大版本）&lt;/strong&gt;。關鍵在於：這個 Commit 必須只包含&lt;strong&gt;單一目的的變更&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;好的 Commit：&lt;/strong&gt; 專注於單一目標。例如：「修正使用者登入頁面的 CSS 樣式」或「新增資料庫連線功能」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不好的 Commit：&lt;/strong&gt; 包含了不相關的變更。例如：「修正 Bug + 調整排版 + 實驗性新功能」。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重要性：&lt;/strong&gt; 當你確定暫存區的變更已經完成了一個&lt;strong&gt;獨立的任務&lt;/strong&gt;時，才應該執行 Commit。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="commit-message-的重要性"&gt;Commit Message 的重要性&lt;/h2&gt;
&lt;p&gt;Commit Message 就像是這個版本變動的「&lt;strong&gt;摘要與目的&lt;/strong&gt;」，它是版本歷史中最重要的註解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;給未來的自己看：&lt;/strong&gt; 當幾個月後，你需要追溯某個功能或 Bug 的來源時，清晰的訊息能讓你快速定位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;給團隊成員看：&lt;/strong&gt; 隊友能透過訊息快速了解你做了什麼，避免重複工作或產生衝突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;💡 優秀的 Commit Message 寫法建議：&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.5 檔案追蹤並納入紀錄！（git status、git add）</title><link>https://echoHaku.github.io/posts/post_git_7/</link><pubDate>Thu, 16 Oct 2025 09:57:53 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_7/</guid><description>&lt;p&gt;在&lt;a href="https://echoHaku.github.io/posts/post_git_6/"&gt;Git 系列分享 - p.4 你是誰？git config 的配置與層級&lt;/a&gt;完成身分設定後，&lt;br&gt;
我們就要進入Git的核心工作流程了！&lt;br&gt;
今天的主題圍繞在「&lt;strong&gt;追蹤變動&lt;/strong&gt;」與「&lt;strong&gt;將變動納入下一個版本&lt;/strong&gt;」的過程。&lt;/p&gt;
&lt;h2 id="一git-status專案的狀態報告"&gt;一、&lt;code&gt;git status&lt;/code&gt;：專案的狀態報告&lt;/h2&gt;
&lt;p&gt;還記得我們在 &lt;a href="https://echoHaku.github.io/posts/post_git_4/"&gt;Git 系列分享 - p.2 Git 對於修改的文件是怎麼劃分的呢？&lt;/a&gt; 所提到的三個工作區域嗎？&lt;br&gt;
&lt;code&gt;git status&lt;/code&gt; 這個指令就是你的「&lt;strong&gt;工作區偵測器&lt;/strong&gt;」，它會掃描你的工作目錄（Working Directory，也就是實體資料夾裡的檔案們），並與 Git 倉庫中的最新版本進行比對，從而確定檔案的狀態：
&lt;br&gt;&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;檔案狀態&lt;/th&gt;
 &lt;th&gt;所在區域&lt;/th&gt;
 &lt;th&gt;顯示於 &lt;code&gt;git status&lt;/code&gt;&lt;/th&gt;
 &lt;th&gt;須進行的操作&lt;/th&gt;
 &lt;th&gt;視覺化工具顯示（Sourcetree）&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;Untracked&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;工作目錄&lt;/td&gt;
 &lt;td&gt;紅色 (Untracked files)&lt;/td&gt;
 &lt;td&gt;需要 &lt;code&gt;git add&lt;/code&gt; 納入追蹤&lt;/td&gt;
 &lt;td&gt;Unstaged Files&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;Modified&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;工作目錄&lt;/td&gt;
 &lt;td&gt;紅色 (Changes not staged for commit)&lt;/td&gt;
 &lt;td&gt;需要 &lt;code&gt;git add&lt;/code&gt; 更新暫存區&lt;/td&gt;
 &lt;td&gt;Unstaged Files&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;Staged&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;暫存區&lt;/td&gt;
 &lt;td&gt;綠色 (Changes to be committed)&lt;/td&gt;
 &lt;td&gt;可以 &lt;code&gt;git commit&lt;/code&gt; 正式提交&lt;/td&gt;
 &lt;td&gt;Staged Files&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;Unmodified&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;Git 倉庫&lt;/td&gt;
 &lt;td&gt;不顯示（乾淨狀態）&lt;/td&gt;
 &lt;td&gt;無需任何操作&lt;/td&gt;
 &lt;td&gt;不顯示&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;當你打開終端機輸入 &lt;code&gt;git status&lt;/code&gt; 時，它會清楚地告訴你：&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.4 你是誰？git config 的配置與層級</title><link>https://echoHaku.github.io/posts/post_git_6/</link><pubDate>Mon, 13 Oct 2025 09:09:25 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_6/</guid><description>&lt;p&gt;在&lt;a href="https://echoHaku.github.io/posts/post_git_5/"&gt;Git 系列分享 - p.3 第一次使用 Git：專案初始化 git init&lt;/a&gt; 之後，我們已經成功讓 Git 接管了你的專案。然而，在開始提交 (Commit) 版本之前，Git 需要知道「你是誰」。
而&lt;code&gt;git config&lt;/code&gt; 正是用來&lt;strong&gt;設定使用者名稱、email、編輯器、顯示風格&lt;/strong&gt;等參數的工具。這些參數將決定每一次版本紀錄（Commit）時，是誰完成了這項工作。&lt;/p&gt;
&lt;h3 id="一為什麼要設定-git-config必備設定"&gt;一、為什麼要設定 &lt;code&gt;git config&lt;/code&gt;？（必備設定）&lt;/h3&gt;
&lt;p&gt;Git 必須將你的身份資訊附加到每一個提交記錄中，以確保版本歷史可被追溯。以下兩個參數是&lt;strong&gt;最基本且必須設定&lt;/strong&gt;的：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;參數&lt;/th&gt;
 &lt;th&gt;用途說明&lt;/th&gt;
 &lt;th&gt;範例指令&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;user.name&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;設定提交記錄上顯示的「使用者名稱」。&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;git config --global user.name &amp;quot;Your Name&amp;quot;&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;user.email&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;設定提交記錄上顯示的「電子郵件」。&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;git config --global user.email &amp;quot;your.email@example.com&amp;quot;&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="二認識-git-配置的三個層級"&gt;二、認識 Git 配置的三個層級&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git config&lt;/code&gt; 的設定可以劃分為三個層級（作用域），它們決定了配置的適用範圍，並且有&lt;strong&gt;層級優先順序&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System（系統層級）
&lt;ul&gt;
&lt;li&gt;適用於整台電腦的所有使用者。&lt;/li&gt;
&lt;li&gt;設定檔位置：git 安裝的資料夾裡，Linux: &lt;code&gt;/etc/gitconfig&lt;/code&gt;，Windows: &lt;code&gt;C:\ProgramData\Git\config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指令加上：&lt;code&gt;--system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;優先級最低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global（使用者層級）&lt;/strong&gt; ✅ 最常用
&lt;ul&gt;
&lt;li&gt;適用於當前作業系統帳號的所有 Git 倉庫。&lt;/li&gt;
&lt;li&gt;設定檔位置：電腦登入帳號的目錄底下，Linux: &lt;code&gt;~/.gitconfig&lt;/code&gt;，Windows:&lt;code&gt;C:\User\&amp;lt;帳號&amp;gt;\.gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指令加上：&lt;code&gt;--global&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;優先級中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Local（倉庫層級）
&lt;ul&gt;
&lt;li&gt;僅適用於特定的 Git 倉庫。通常是因為有多個帳號（公司用、個人用），所以在個別倉庫去指定用哪個帳號。&lt;/li&gt;
&lt;li&gt;設定檔位置：每個.git資料夾內&lt;code&gt;.git/config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;預設為 local scope，如果不指定 &lt;code&gt;--global&lt;/code&gt; 或 &lt;code&gt;--system&lt;/code&gt;，就會套用在這裡，或是用&lt;code&gt;--local&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;優先級最高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;優先順序與應用情境&lt;/strong&gt;&lt;br&gt;
Git 會依據 &lt;strong&gt;Local → Global → System&lt;/strong&gt; 的順序來讀取設定。&lt;br&gt;
例如，如果你在 Global 層級設定了個人 Email，但在某個專案（Local 層級）設定了公司 Email，則該專案會&lt;strong&gt;優先使用&lt;/strong&gt; Local 層級設定的公司 Email。&lt;br&gt;
這樣可以讓你在一台電腦同時去使用兩組或以上的git設定！&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.3 第一次使用 Git：專案初始化 git init</title><link>https://echoHaku.github.io/posts/post_git_5/</link><pubDate>Wed, 08 Oct 2025 09:11:34 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_5/</guid><description>&lt;p&gt;在&lt;a href="https://echoHaku.github.io/posts/post_git_4/"&gt;Git 系列分享Day 2 - Git 對於修改的文件是怎麼劃分的呢？&lt;/a&gt; 我們了解了 Git 如何將專案劃分為工作目錄、暫存區和 Git 倉庫這三個區域。現在，讓我們開始實戰，學習如何讓 Git 開始管理你的專案！&lt;/p&gt;
&lt;h2 id="啟動版本控制git-init-的奧秘"&gt;啟動版本控制：&lt;code&gt;git init&lt;/code&gt; 的奧秘&lt;/h2&gt;
&lt;p&gt;要讓 Git 接管一個資料夾，使其具備版本控制能力，我們需要做的第一步就是&lt;strong&gt;初始化 (Initialize) 專案&lt;/strong&gt;。這個動作是透過 &lt;code&gt;git init&lt;/code&gt; 指令來完成的。&lt;/p&gt;
&lt;p&gt;當你執行 &lt;code&gt;git init&lt;/code&gt; 之後，Git 就會在這個資料夾內建立它的「資料庫」，專案才正式進入 Git 的管理流程。&lt;/p&gt;
&lt;h3 id="git-init-實際做了什麼"&gt;&lt;code&gt;git init&lt;/code&gt; 實際做了什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;建立核心資料庫：&lt;code&gt;.git&lt;/code&gt; 資料夾&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 會在你的專案資料夾內建立一個&lt;strong&gt;隱藏的 &lt;code&gt;.git&lt;/code&gt; 資料夾&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;這個資料夾就是你的 &lt;strong&gt;Local Repository (本地倉庫)&lt;/strong&gt;，它包含了所有 Git 運作所需的檔案和資料結構，例如：&lt;strong&gt;所有版本紀錄 (Commit History)&lt;/strong&gt;、&lt;strong&gt;分支資訊 (Branches)&lt;/strong&gt;、配置設定、以及你之前提過的 &lt;strong&gt;暫存區 (Index)&lt;/strong&gt; 資訊等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重要性：&lt;/strong&gt; 這是 Git 儲存所有歷史快照的核心資料庫。&lt;strong&gt;請勿手動修改或刪除此資料夾內的任何檔案！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化主分支：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 會自動建立一個預設的主線分支，傳統上稱為 &lt;code&gt;master&lt;/code&gt;，但現在許多新的 Git 版本和平台會將其預設為 &lt;strong&gt;&lt;code&gt;main&lt;/code&gt;&lt;/strong&gt;。這就是你專案的起點。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="如何執行-git-init"&gt;如何執行 &lt;code&gt;git init&lt;/code&gt;？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用命令列(CLI)執行。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;開啟終端機（Windows的cmd或git bash、macOS/Linux的 Terminal）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; 到要管理的資料夾位置&lt;/li&gt;
&lt;li&gt;輸入&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;點下 &lt;code&gt;enter&lt;/code&gt;，你會看到類似&lt;code&gt;Initialized empty Git repository in /path/to/your/project/.git/&lt;/code&gt;的回覆，這表示 Git 已經成功初始化。
&lt;img src="https://echoHaku.github.io/images/git_init_cli.png" alt="git init cli pic"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;視覺化工具 (GUI) 執行&lt;/strong&gt;
若你不習慣使用指令，可以透過視覺化工具來操作。這對於害怕代碼的初學者來說是非常友好的替代方案。下方以&lt;code&gt;Sourcetree&lt;/code&gt;為例&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.2 Git 對於修改的文件是怎麼劃分的呢？</title><link>https://echoHaku.github.io/posts/post_git_4/</link><pubDate>Fri, 03 Oct 2025 09:12:47 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_4/</guid><description>&lt;p&gt;如同 &lt;a href="https://echoHaku.github.io/posts/post_git_3/"&gt;Git 系列分享Day 1 - Git是什麼？&lt;/a&gt; 所述，Git 是一種強大的版本控制工具。然而，Git 並不會將你所有的修改&lt;strong&gt;自動&lt;/strong&gt;納入版本紀錄。&lt;/p&gt;
&lt;p&gt;要理解 Git 如何追蹤和儲存你的工作，必須先了解它將一個專案劃分為的&lt;strong&gt;三個核心工作區域（Three States）&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="git-的三個工作區域與主要流程"&gt;Git 的三個工作區域與主要流程&lt;/h2&gt;
&lt;p&gt;Git 的版本控制流程可以被簡化為三個步驟，文件會依序在三個區域間流動：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;工作目錄 →（git add）→ 暫存區 →（git commit）→ Git 倉庫
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這三個區域代表了 Git 對你本次修改所處狀態的認定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;🗂️ Working Directory（工作目錄）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是你&lt;strong&gt;實際進行檔案編輯&lt;/strong&gt;的地方，也是專案檔案在你的電腦上看得見的實體資料夾。&lt;/li&gt;
&lt;li&gt;狀態認定： 所有你新建立或修改過的檔案，在尚未執行 &lt;code&gt;git add&lt;/code&gt; 之前，都處於「&lt;strong&gt;未追蹤 (Untracked)&lt;/strong&gt;」或「&lt;strong&gt;已修改 (Modified)&lt;/strong&gt;」狀態。&lt;/li&gt;
&lt;li&gt;備註： 專注於你的開發與編輯，你可以隨意修改檔案而不用擔心影響正式的版本紀錄。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📥 Staging Area（暫存區 / Index）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暫存區是 Git 在正式提交（Commit）之前，&lt;strong&gt;用來準備「快照清單」的緩衝區&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;進入方式： 使用 &lt;code&gt;git add &amp;lt;檔案名&amp;gt;&lt;/code&gt; 指令，將你在工作目錄中的特定變更納入準備清單。&lt;/li&gt;
&lt;li&gt;關鍵作用： 它是你決定「&lt;strong&gt;哪些變更要包含進下一個版本紀錄 (Commit)&lt;/strong&gt;」的地方。&lt;/li&gt;
&lt;li&gt;備註： Git 允許你只將一個檔案的&lt;strong&gt;部分內容（Stage Hunk / Stage Lines）&lt;/strong&gt; 加入暫存區，實現「&lt;em&gt;Partial Commit&lt;/em&gt;」，這對於將大改動拆分成多個邏輯清晰的小提交非常有幫助。（像是一個檔案當中的某一段、某幾行去做Commint）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🗃️ Git Repository（Git 倉庫 / HEAD）&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.1 Git是什麼？</title><link>https://echoHaku.github.io/posts/post_git_3/</link><pubDate>Wed, 01 Oct 2025 08:32:32 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_3/</guid><description>&lt;p&gt;如同&lt;a href="https://echoHaku.github.io/posts/post_git_2/"&gt;Git 系列分享 - p.0 版本控制是什麼？&lt;/a&gt;有提及的，&lt;strong&gt;Git 是一種開源的「分散式版本控制系統（DVCS）」&lt;/strong&gt;，它專門設計來高效且可靠地處理專案中檔案的每一次變動。&lt;/p&gt;
&lt;h2 id="git-的核心優勢"&gt;Git 的核心優勢&lt;/h2&gt;
&lt;p&gt;Git 之所以能在眾多版本控制工具中脫穎而出，成為現代數位工作者的標準配備，主要歸功於其以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分散式架構 (High Redundancy)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個使用者都有專案完整的歷史紀錄。即使中央伺服器故障，你仍可以從任何一位使用者端恢復資料。這讓系統的&lt;strong&gt;容錯率極高&lt;/strong&gt;，能有效避免因單點故障而導致版本控制功能停擺。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快照機制 (Snapshots)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;機制： Git 紀錄的不是「檔案的差異」，而是將整個專案的狀態拍攝「&lt;strong&gt;快照&lt;/strong&gt;」並儲存下來。(&lt;em&gt;註：這個機制非常精妙，未來有機會的話我們會用一整篇文章來深入描述！&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;優勢： 這使得版本切換和歷史紀錄查詢&lt;strong&gt;極為迅速&lt;/strong&gt;，效率遠高於傳統的集中式系統。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開源與免費 (Free &amp;amp; Open Source)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;任何人都可以免費使用 Git，這也是它能迅速普及的重要原因之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;強大的分支管理 (Branching)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Git 的分支（Branch）操作非常輕便、快速且不佔資源，讓開發者可以在不影響主線的情況下，&lt;strong&gt;安全地進行功能開發或實驗&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git-的挑戰與考量劣勢"&gt;Git 的挑戰與考量（劣勢）&lt;/h2&gt;
&lt;p&gt;雖然 Git 功能強大，但在某些情況下，它也會帶來一些挑戰：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;學習曲線陡峭：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 的底層概念（例如：Stage, Commit, Branch, Rebase 等）相對抽象，對於初學者來說，學習門檻確實較高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不擅長處理大型二進位檔案 (Large Binary Files)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 的快照機制是針對&lt;strong&gt;文字檔案&lt;/strong&gt;進行高效壓縮。對於大型的二進位檔案（例如：高畫質圖檔、影音檔、大型資料庫備份），Git 會完整儲存每一個版本的快照，導致版本庫（Repository）會快速膨脹，佔用大量空間，且同步速度變慢。（&lt;em&gt;解決方案：這個問題通常會透過搭配 Git LFS (Large File Storage) 等擴展工具來解決。&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部分操作的破壞性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某些進階操作（如 &lt;code&gt;rebase&lt;/code&gt; 或 &lt;code&gt;reset&lt;/code&gt;）雖然功能強大，但如果操作不當，可能會修改歷史紀錄，導致與團隊成員的版本衝突，甚至遺失資料，需要謹慎使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git-的使用途徑"&gt;Git 的使用途徑&lt;/h2&gt;
&lt;p&gt;對於新手而言，Git 的學習門檻確實相對較高，這主要體現在它複雜的指令和概念上。不過，你可以選擇以下幾種方式來使用 Git：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;終端機／命令列 (Terminal / CLI)：&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.0 版本控制是什麼？</title><link>https://echoHaku.github.io/posts/post_git_2/</link><pubDate>Thu, 25 Sep 2025 09:21:17 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_2/</guid><description>&lt;h2 id="版本控制到底是什麼到底可以幫助我們解決什麼問題"&gt;版本控制到底是什麼？到底可以幫助我們解決什麼問題？&lt;/h2&gt;
&lt;h3 id="版本控制"&gt;「版本控制」&lt;/h3&gt;
&lt;p&gt;在正式認識進入&lt;a href="https://echoHaku.github.io/posts/post_git_1/"&gt;Git 系列文章&lt;/a&gt; 之前，我們必須先理解「&lt;strong&gt;版本控制&lt;/strong&gt;」這個核心概念。&lt;/p&gt;
&lt;p&gt;過去，當我們想備份文件或區分不同版本時，通常會建立一個新資料夾並加上日期，然後將所有檔案複製過去。但這種做法不僅會&lt;strong&gt;占用大量空間&lt;/strong&gt;，也無法&lt;strong&gt;快速看出兩個版本之間有哪些差異，更難以追蹤每次修改的目的&lt;/strong&gt;。這也就是「版本控制」誕生的原因。&lt;/p&gt;
&lt;h3 id="版本控制不只是為了工程師而生的"&gt;版本控制不只是為了工程師而生的！&lt;/h3&gt;
&lt;p&gt;很多人以為版本控制只對工程師重要，那你就錯了。&lt;/p&gt;
&lt;p&gt;想像一下，身為一個文案企劃，你正在修改一份重要文件，結果發現最新版本改得一團糟，想要回到兩天前的雛形文件，卻不知道該怎麼辦。或者你和同事共同編輯一份文件，最終發現兩人的版本內容差異太大，無法順利合併。當你與客戶討論合約內容時，雙方針對合約中的某一行內容各執己見，無法追溯歷史紀錄&amp;hellip;這些情境是不是聽起來很熟悉？&lt;/p&gt;
&lt;p&gt;不論你是工程師、設計師、小編、業務，這些問題都可能發生在你的日常工作中。&lt;strong&gt;Git 其實不只是一個程式碼的版本控制工具，它更像是一台「數位時光機」&lt;/strong&gt;，能為你處理過的任何檔案（如 Word 文件、設計稿、企劃書等）留下修改紀錄。它讓你不僅能隨時回到過去的任何一個版本，還能有效地與他人協同工作，確保檔案不會混亂。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版本控制是一種強大的專案管理工具，它能&lt;strong&gt;比較每次版本差異&lt;/strong&gt;、&lt;strong&gt;追蹤修改依據&lt;/strong&gt;、並&lt;strong&gt;提升協作效率&lt;/strong&gt;，對於現代數位工作者而言至關重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="版本控制工具大致核心方式分成兩類"&gt;版本控制工具大致核心方式分成兩類&lt;/h3&gt;
&lt;p&gt;版本控制工具大致核心方式分成兩類：集中式的版本控制系統（Centralized Version Control Sytem）和分散式的版本控制系統（Distributed Version Control System）。
而&lt;strong&gt;Git 是其中一種實現「分散式版本控制」的工具！&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;項目&lt;/th&gt;
 &lt;th&gt;分散式版本控制（DVCS）&lt;/th&gt;
 &lt;th&gt;集中式版本控制（CVCS）&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;定義&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;每個相關使用者的電腦當中都擁有完整的檔案 Repository 副本&lt;/strong&gt;，包括所有的歷史紀錄、分支資訊、提交紀錄等等。&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;所有的檔案及版本紀錄都集中於伺服器端&lt;/strong&gt;，開發者只會擁有目前版本的「副本」，需要連線到伺服器去做大部分的操作。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;特點&lt;/td&gt;
 &lt;td&gt;架構和權限控制相對複雜一些，可以離線操作，學習門檻較高。&lt;/td&gt;
 &lt;td&gt;架構簡單，權限控制明確，資料集中，需連線伺服器才可以執行。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;版本庫位置&lt;/td&gt;
 &lt;td&gt;每個人都有完整版本庫&lt;/td&gt;
 &lt;td&gt;僅伺服器保有完整版本庫&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;離線作業&lt;/td&gt;
 &lt;td&gt;可離線 commit / 查看歷史&lt;br&gt;可離線撰寫程式、commit、切換branch&lt;/td&gt;
 &lt;td&gt;無法離線 commit / 查看歷史&lt;br&gt;可離線撰寫程式，不可commit、不可切branch&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;效能&lt;/td&gt;
 &lt;td&gt;本地操作快&lt;/td&gt;
 &lt;td&gt;須與伺服器通訊，較慢&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;分支管理&lt;/td&gt;
 &lt;td&gt;快速輕便，支援多分支協作&lt;/td&gt;
 &lt;td&gt;分支較重，複雜&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;多人開發&lt;/td&gt;
 &lt;td&gt;各自開分支，不互相干擾&lt;/td&gt;
 &lt;td&gt;在同一分支修改，容易發生衝突&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;建立分支&lt;/td&gt;
 &lt;td&gt;本地建分支，幾乎不耗資源，快速輕巧&lt;/td&gt;
 &lt;td&gt;需在伺服器上建立資料夾，操作較慢且複雜&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;merge branch&lt;/td&gt;
 &lt;td&gt;自動合併能力強，支援rebase, squash等功能&lt;/td&gt;
 &lt;td&gt;合併功能較弱，容易產生衝突或需手動處理&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;遇到合併衝突&lt;/td&gt;
 &lt;td&gt;本機解決後再 push&lt;/td&gt;
 &lt;td&gt;必須在伺服器上解決，其他人無法同時作業&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;故障容忍性&lt;/td&gt;
 &lt;td&gt;高，資料可從他人 repo 還原&lt;/td&gt;
 &lt;td&gt;低，伺服器若掛掉風險大&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;不小心刪除本地資料&lt;/td&gt;
 &lt;td&gt;可從本地 repo 恢復完整歷史&lt;/td&gt;
 &lt;td&gt;若沒 commit，無法從本地找回&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;想改寫錯誤的 commit 歷史&lt;/td&gt;
 &lt;td&gt;用 &lt;code&gt;rebase&lt;/code&gt; 或 &lt;code&gt;reset&lt;/code&gt; 彈性操作&lt;/td&gt;
 &lt;td&gt;無法重寫歷史，只能再提交一筆修正紀錄&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;誤刪主機專案資料&lt;/td&gt;
 &lt;td&gt;其他開發者的 repo 可還原&lt;/td&gt;
 &lt;td&gt;主機毀損即資料全毀（若無備份）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;搭配 GitHub/GitLab CI/CD、自動部屬&lt;/td&gt;
 &lt;td&gt;廣泛支援，指令簡單&lt;/td&gt;
 &lt;td&gt;支援有限，需額外串接，且較少平台有支援SVN自動部屬&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;適合對象&lt;/td&gt;
 &lt;td&gt;大型團隊、開源專案、需彈性開發&lt;/td&gt;
 &lt;td&gt;小型團隊、流程單純、控管明確&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下來我們將仔細看看Git到底是什麼，他到底有什麼優勢讓他成為現代數位工作者必須熟知的工具？&lt;br&gt;
&lt;a href="https://echoHaku.github.io/posts/post_git_3/"&gt;Git 系列分享 - p.1 Git是什麼？&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Git 系列分享 - 重新理解版本控制的核心概念</title><link>https://echoHaku.github.io/posts/post_git_1/</link><pubDate>Thu, 25 Sep 2025 09:21:11 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_1/</guid><description>&lt;h2 id="git-系列分享---重新理解版本控制的核心概念"&gt;Git 系列分享 - 重新理解版本控制的核心概念&lt;/h2&gt;
&lt;p&gt;嗨，各位好。
最近在進行個人技術的深度整理與鞏固，深刻體會到「輸出」是檢驗「輸入」成效的最佳方式。秉持著這個理念，計畫未來將會陸續分享一系列關於特定技術領域的深度文章，希望能藉此有更深度的思考與更完整的融合知識！&lt;/p&gt;
&lt;p&gt;經過審慎思考，我將第一個主題定為 &lt;strong&gt;Git&lt;/strong&gt;。作為現代軟體開發不可或缺的版本控制系統，Git 的重要性不言而喻。它不僅僅是一個工具，更是一種思維模式，能幫助我們更有效地管理程式碼與協同合作。它的應用範圍不只局限於軟體開發，還能擴展到文件或討論資訊的管理，這也是我決定以它作為我的第一個系列文章的原因！&lt;/p&gt;
&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_2/"&gt;Git 系列分享 - p.0 版本控制是什麼？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="正文"&gt;正文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_3/"&gt;Git 系列分享 - p.1 Git是什麼？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_4/"&gt;Git 系列分享 - p.2 Git 對於修改的文件是怎麼劃分的呢？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_5/"&gt;Git 系列分享 - p.3 第一次使用 Git：專案初始化 git init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_6/"&gt;Git 系列分享 - p.4 你是誰？git config 的配置與層級&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_7/"&gt;Git 系列分享 - p.5 檔案追蹤並納入紀錄！（git status、git add）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_8/"&gt;Git 系列分享 - p.6 正式提交一個commit囉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_9/"&gt;Git 系列分享 - p.7 版本控制的篩選器 - .gitignore 的使用與規則&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>