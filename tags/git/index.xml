<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on ECHOHAKU BLOG</title><link>https://echoHaku.github.io/tags/git/</link><description>Recent content in Git on ECHOHAKU BLOG</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 01 Oct 2025 08:32:32 +0800</lastBuildDate><atom:link href="https://echoHaku.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 系列分享 - p.1 Git是什麼？</title><link>https://echoHaku.github.io/posts/post_git_3/</link><pubDate>Wed, 01 Oct 2025 08:32:32 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_3/</guid><description>&lt;p&gt;如同&lt;a href="https://echoHaku.github.io/posts/post_git_2/"&gt;Git 系列分享 - p.0 版本控制是什麼？&lt;/a&gt;有提及的，&lt;strong&gt;Git 是一種開源的「分散式版本控制系統（DVCS）」&lt;/strong&gt;，它專門設計來高效且可靠地處理專案中檔案的每一次變動。&lt;/p&gt;
&lt;h2 id="git-的核心優勢"&gt;Git 的核心優勢&lt;/h2&gt;
&lt;p&gt;Git 之所以能在眾多版本控制工具中脫穎而出，成為現代數位工作者的標準配備，主要歸功於其以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分散式架構 (High Redundancy)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個使用者都有專案完整的歷史紀錄。即使中央伺服器故障，你仍可以從任何一位使用者端恢復資料。這讓系統的&lt;strong&gt;容錯率極高&lt;/strong&gt;，能有效避免因單點故障而導致版本控制功能停擺。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快照機制 (Snapshots)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;機制： Git 紀錄的不是「檔案的差異」，而是將整個專案的狀態拍攝「&lt;strong&gt;快照&lt;/strong&gt;」並儲存下來。(&lt;em&gt;註：這個機制非常精妙，未來有機會的話我們會用一整篇文章來深入描述！&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;優勢： 這使得版本切換和歷史紀錄查詢&lt;strong&gt;極為迅速&lt;/strong&gt;，效率遠高於傳統的集中式系統。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開源與免費 (Free &amp;amp; Open Source)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;任何人都可以免費使用 Git，這也是它能迅速普及的重要原因之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;強大的分支管理 (Branching)：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Git 的分支（Branch）操作非常輕便、快速且不佔資源，讓開發者可以在不影響主線的情況下，&lt;strong&gt;安全地進行功能開發或實驗&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git-的挑戰與考量劣勢"&gt;Git 的挑戰與考量（劣勢）&lt;/h2&gt;
&lt;p&gt;雖然 Git 功能強大，但在某些情況下，它也會帶來一些挑戰：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;學習曲線陡峭：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 的底層概念（例如：Stage, Commit, Branch, Rebase 等）相對抽象，對於初學者來說，學習門檻確實較高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不擅長處理大型二進位檔案 (Large Binary Files)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 的快照機制是針對&lt;strong&gt;文字檔案&lt;/strong&gt;進行高效壓縮。對於大型的二進位檔案（例如：高畫質圖檔、影音檔、大型資料庫備份），Git 會完整儲存每一個版本的快照，導致版本庫（Repository）會快速膨脹，佔用大量空間，且同步速度變慢。（&lt;em&gt;解決方案：這個問題通常會透過搭配 Git LFS (Large File Storage) 等擴展工具來解決。&lt;/em&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部分操作的破壞性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某些進階操作（如 &lt;code&gt;rebase&lt;/code&gt; 或 &lt;code&gt;reset&lt;/code&gt;）雖然功能強大，但如果操作不當，可能會修改歷史紀錄，導致與團隊成員的版本衝突，甚至遺失資料，需要謹慎使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git-的使用途徑"&gt;Git 的使用途徑&lt;/h2&gt;
&lt;p&gt;對於新手而言，Git 的學習門檻確實相對較高，這主要體現在它複雜的指令和概念上。不過，你可以選擇以下幾種方式來使用 Git：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;終端機／命令列 (Terminal / CLI)：&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Git 系列分享 - p.0 版本控制是什麼？</title><link>https://echoHaku.github.io/posts/post_git_2/</link><pubDate>Thu, 25 Sep 2025 09:21:17 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_2/</guid><description>&lt;h2 id="版本控制到底是什麼到底可以幫助我們解決什麼問題"&gt;版本控制到底是什麼？到底可以幫助我們解決什麼問題？&lt;/h2&gt;
&lt;h3 id="版本控制"&gt;「版本控制」&lt;/h3&gt;
&lt;p&gt;在正式認識進入&lt;a href="https://echoHaku.github.io/posts/post_git_1/"&gt;Git 系列文章&lt;/a&gt; 之前，我們必須先理解「&lt;strong&gt;版本控制&lt;/strong&gt;」這個核心概念。&lt;/p&gt;
&lt;p&gt;過去，當我們想備份文件或區分不同版本時，通常會建立一個新資料夾並加上日期，然後將所有檔案複製過去。但這種做法不僅會&lt;strong&gt;占用大量空間&lt;/strong&gt;，也無法&lt;strong&gt;快速看出兩個版本之間有哪些差異，更難以追蹤每次修改的目的&lt;/strong&gt;。這也就是「版本控制」誕生的原因。&lt;/p&gt;
&lt;h3 id="版本控制不只是為了工程師而生的"&gt;版本控制不只是為了工程師而生的！&lt;/h3&gt;
&lt;p&gt;很多人以為版本控制只對工程師重要，那你就錯了。&lt;/p&gt;
&lt;p&gt;想像一下，身為一個文案企劃，你正在修改一份重要文件，結果發現最新版本改得一團糟，想要回到兩天前的雛形文件，卻不知道該怎麼辦。或者你和同事共同編輯一份文件，最終發現兩人的版本內容差異太大，無法順利合併。當你與客戶討論合約內容時，雙方針對合約中的某一行內容各執己見，無法追溯歷史紀錄&amp;hellip;這些情境是不是聽起來很熟悉？&lt;/p&gt;
&lt;p&gt;不論你是工程師、設計師、小編、業務，這些問題都可能發生在你的日常工作中。&lt;strong&gt;Git 其實不只是一個程式碼的版本控制工具，它更像是一台「數位時光機」&lt;/strong&gt;，能為你處理過的任何檔案（如 Word 文件、設計稿、企劃書等）留下修改紀錄。它讓你不僅能隨時回到過去的任何一個版本，還能有效地與他人協同工作，確保檔案不會混亂。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版本控制是一種強大的專案管理工具，它能&lt;strong&gt;比較每次版本差異&lt;/strong&gt;、&lt;strong&gt;追蹤修改依據&lt;/strong&gt;、並&lt;strong&gt;提升協作效率&lt;/strong&gt;，對於現代數位工作者而言至關重要。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="版本控制工具大致核心方式分成兩類"&gt;版本控制工具大致核心方式分成兩類&lt;/h3&gt;
&lt;p&gt;版本控制工具大致核心方式分成兩類：集中式的版本控制系統（Centralized Version Control Sytem）和分散式的版本控制系統（Distributed Version Control System）。
而&lt;strong&gt;Git 是其中一種實現「分散式版本控制」的工具！&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;項目&lt;/th&gt;
 &lt;th&gt;分散式版本控制（DVCS）&lt;/th&gt;
 &lt;th&gt;集中式版本控制（CVCS）&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;定義&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;每個相關使用者的電腦當中都擁有完整的檔案 Repository 副本&lt;/strong&gt;，包括所有的歷史紀錄、分支資訊、提交紀錄等等。&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;所有的檔案及版本紀錄都集中於伺服器端&lt;/strong&gt;，開發者只會擁有目前版本的「副本」，需要連線到伺服器去做大部分的操作。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;特點&lt;/td&gt;
 &lt;td&gt;架構和權限控制相對複雜一些，可以離線操作，學習門檻較高。&lt;/td&gt;
 &lt;td&gt;架構簡單，權限控制明確，資料集中，需連線伺服器才可以執行。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;版本庫位置&lt;/td&gt;
 &lt;td&gt;每個人都有完整版本庫&lt;/td&gt;
 &lt;td&gt;僅伺服器保有完整版本庫&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;離線作業&lt;/td&gt;
 &lt;td&gt;可離線 commit / 查看歷史&lt;br&gt;可離線撰寫程式、commit、切換branch&lt;/td&gt;
 &lt;td&gt;無法離線 commit / 查看歷史&lt;br&gt;可離線撰寫程式，不可commit、不可切branch&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;效能&lt;/td&gt;
 &lt;td&gt;本地操作快&lt;/td&gt;
 &lt;td&gt;須與伺服器通訊，較慢&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;分支管理&lt;/td&gt;
 &lt;td&gt;快速輕便，支援多分支協作&lt;/td&gt;
 &lt;td&gt;分支較重，複雜&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;多人開發&lt;/td&gt;
 &lt;td&gt;各自開分支，不互相干擾&lt;/td&gt;
 &lt;td&gt;在同一分支修改，容易發生衝突&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;建立分支&lt;/td&gt;
 &lt;td&gt;本地建分支，幾乎不耗資源，快速輕巧&lt;/td&gt;
 &lt;td&gt;需在伺服器上建立資料夾，操作較慢且複雜&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;merge branch&lt;/td&gt;
 &lt;td&gt;自動合併能力強，支援rebase, squash等功能&lt;/td&gt;
 &lt;td&gt;合併功能較弱，容易產生衝突或需手動處理&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;遇到合併衝突&lt;/td&gt;
 &lt;td&gt;本機解決後再 push&lt;/td&gt;
 &lt;td&gt;必須在伺服器上解決，其他人無法同時作業&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;故障容忍性&lt;/td&gt;
 &lt;td&gt;高，資料可從他人 repo 還原&lt;/td&gt;
 &lt;td&gt;低，伺服器若掛掉風險大&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;不小心刪除本地資料&lt;/td&gt;
 &lt;td&gt;可從本地 repo 恢復完整歷史&lt;/td&gt;
 &lt;td&gt;若沒 commit，無法從本地找回&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;想改寫錯誤的 commit 歷史&lt;/td&gt;
 &lt;td&gt;用 &lt;code&gt;rebase&lt;/code&gt; 或 &lt;code&gt;reset&lt;/code&gt; 彈性操作&lt;/td&gt;
 &lt;td&gt;無法重寫歷史，只能再提交一筆修正紀錄&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;誤刪主機專案資料&lt;/td&gt;
 &lt;td&gt;其他開發者的 repo 可還原&lt;/td&gt;
 &lt;td&gt;主機毀損即資料全毀（若無備份）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;搭配 GitHub/GitLab CI/CD、自動部屬&lt;/td&gt;
 &lt;td&gt;廣泛支援，指令簡單&lt;/td&gt;
 &lt;td&gt;支援有限，需額外串接，且較少平台有支援SVN自動部屬&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;適合對象&lt;/td&gt;
 &lt;td&gt;大型團隊、開源專案、需彈性開發&lt;/td&gt;
 &lt;td&gt;小型團隊、流程單純、控管明確&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下來我們將仔細看看Git到底是什麼，他到底有什麼優勢讓他成為現代數位工作者必須熟知的工具？&lt;br&gt;
&lt;a href="https://echoHaku.github.io/posts/post_git_3/"&gt;Git 系列分享 - p.1 Git是什麼？&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Git 系列分享 - 重新理解版本控制的核心概念</title><link>https://echoHaku.github.io/posts/post_git_1/</link><pubDate>Thu, 25 Sep 2025 09:21:11 +0800</pubDate><guid>https://echoHaku.github.io/posts/post_git_1/</guid><description>&lt;h2 id="git-系列分享---重新理解版本控制的核心概念"&gt;Git 系列分享 - 重新理解版本控制的核心概念&lt;/h2&gt;
&lt;p&gt;嗨，各位好。
最近在進行個人技術的深度整理與鞏固，深刻體會到「輸出」是檢驗「輸入」成效的最佳方式。秉持著這個理念，計畫未來將會陸續分享一系列關於特定技術領域的深度文章，希望能藉此有更深度的思考與更完整的融合知識！&lt;/p&gt;
&lt;p&gt;經過審慎思考，我將第一個主題定為 &lt;strong&gt;Git&lt;/strong&gt;。作為現代軟體開發不可或缺的版本控制系統，Git 的重要性不言而喻。它不僅僅是一個工具，更是一種思維模式，能幫助我們更有效地管理程式碼與協同合作。它的應用範圍不只局限於軟體開發，還能擴展到文件或討論資訊的管理，這也是我決定以它作為我的第一個系列文章的原因！&lt;/p&gt;
&lt;h2 id="前導"&gt;前導&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://echoHaku.github.io/posts/post_git_2/"&gt;Git 系列分享 - p.0 版本控制是什麼？&lt;/a&gt;
&lt;a href="https://echoHaku.github.io/posts/post_git_3/"&gt;Git 系列分享 - p.1 Git是什麼？&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>